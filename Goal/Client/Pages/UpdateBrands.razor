@page "/update-brand/{id:int}"
@using Goal.Client.Services.InterfaceServices;
@using Goal.Shared.Entities;
@inject IBrandService brandService
<div class="row">
    <div class="col-md-8 offset-3">
        <div class="card">
            <div class="card-header">
                <span class="oi oi-plus"></span> Редагувати бренд
            </div>
            <div class="card-body">
                <EditForm Model="@newBrand" OnValidSubmit="HandleAddBrand">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary class="form-control p-3"></ValidationSummary>
                    <div class="form-group mt-2">
                        <div class="alert alert-@CssClass">@Message</div>
                    </div>
                    <div class="form-group mt-2">
                        <label class="form-label" for="title">Назва</label>
                        <InputText id="title" @bind-Value="newBrand.Name" class="form-control"></InputText>
                        <ValidationMessage For="@(()=> newBrand.Name)"></ValidationMessage>
                    </div>
                        <button type="submit" class="btn btn-primary float-end"> <i class="oi oi-arrow-circle-top"></i> Зберегти</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public int Id { get; set; }
    public Brand newBrand = new Brand();
    private string? uploadMessage;
    private string? Message = string.Empty;
    private string? CssClass = string.Empty;
    async Task HandleAddBrand()
    {
        Message = "";
        var response = await brandService.UpdateBrand(newBrand);
        Message = response!.Message;
        CssClass = response!.CssClass;
    }

    protected override async Task OnParametersSetAsync()
    {
        var brand = await brandService.GetBrand(Id);
        Message = brand.Message;
        CssClass = brand.CssClass;
        if (brand.Single != null)
            newBrand = brand.Single;
    }

}
