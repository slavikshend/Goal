@page "/addproduct"
@using Goal.Client.Services.InterfaceServices;
@using Goal.Shared.Entities;

@inject IProductService productService

<div class="row">
    <div class="col-md-6 offset-3">
        <h3 class="mt-2 mb-1">Додати продукт</h3>

        <EditForm Model="@newProduct" OnValidSubmit="HandleAddProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group mt-2">
                <div class="alert alert-@CssClass">@Message</div>
            </div>
            <div class="form-group mt-1">
                <label class="form-label" for="title">Назва</label>
                <InputText id="title" @bind-Value="newProduct.Name" class="form-control"></InputText>
                <ValidationMessage For="@(()=> newProduct.Name)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="url">Ціна</label>
                <input type="text" id="price" min="0.5" @bind="newProduct.OriginalPrice" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.OriginalPrice)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="url">Ціна зі знижкою</label>
                <input type="text" id="price" min="0.5" @bind="newProduct.NewPrice" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.NewPrice)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="description">Опис</label>
                <InputTextArea id="description" @bind-Value="newProduct.Description" class="form-control"></InputTextArea>
                <ValidationMessage For="@(()=> newProduct.Description)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="description">Кількість</label>
                <input type="number" id="description" min="1" @bind="newProduct.Quantity" class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.Quantity)"></ValidationMessage>
            </div>
            <div class="form-group mt-4">
                <label class="form-label" for="image">Фото</label>&nbsp; <span class="text-danger fw-bold">@uploadMessage</span>
                <InputFile id="image" OnChange="OnFileChange" class="form-control"></InputFile>
                <ValidationMessage For="@(()=> newProduct.Image)"></ValidationMessage>
            </div>
            <div class="form-check mt-5">
                <button type="submit" class="btn btn-primary"> <i class="oi oi-plus"></i> Зберегти</button>
            </div>
        </EditForm>
    </div>
</div>



@code {
    public Product newProduct = new Product();
    private string? uploadMessage;
    private string? Message = string.Empty;
    private string? CssClass = string.Empty;
    async Task HandleAddProduct()
    {
        Message = "";
        var response = await productService.AddProduct(newProduct);
            Message = response!.Message;
            CssClass = response!.CssClass; 
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if(fileInfo.Extension.ToLower().Contains(".jpg"))
        {
            uploadMessage = "";
            var format = "image/jpg";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            newProduct.Image = imageData;

        }
        else { uploadMessage = "Неправильний формат файлу"; }
    }
}
