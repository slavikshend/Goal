@page "/manage-products"
@using Goal.Client.Services.InterfaceServices;
@using Goal.Shared.Entities;
@using Goal.Shared.ServerServiceModels;

@inject IProductService productService
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@if (serviceModel.List != null)
{
    <div class="row">
        <div class="row sticky-top mb-1">
            <div class="col-md-8 mt-1"><h3 class="text-muted" style="font-family:'Javanese Text'">Видалити/редагувати продукти</h3></div>
        </div>
        <hr />
        @foreach (var product in serviceModel.List)
        {
            <div class="col-md-3">
                <div class="card border-1 m-2 mb-2">
                    <a href="productDetails/@product.Id" style="text-decoration:none;">
                        <div class="card-header text-center">
                            <img class="card-img-top" src="@product.Image" style="width:200px; height:150px" />
                        </div>
                        <div class="card-body">
                            <p>
                                <span class="text-primary">@product.Name </span>&nbsp; &nbsp;
                                <br />
                                <span class="text-secondary text-muted fs-6">@product.Description</span><br>
                                @if (product.NewPrice != 0 && product.NewPrice < product.OriginalPrice)
                                {
                                    <span class="text-danger text-decoration-line-through" style="font-size:16px;"><i>@product.OriginalPrice</i></span>
                                    <span>&nbsp; &nbsp;</span>
                                    <span class="badge bg-primary badge rounded-end bg-danger">Знижка</span>
                                    <br />
                                    <span class="text-primary text-center" style="font-size:16px;"><i>@product.NewPrice</i></span>
                                }
                                else
                                {
                                    <span class="text-danger" style="font-size:16px;"><i>@product.OriginalPrice</i></span>
                                }
                            </p>
                        </div>
                    </a>
                    <div class="card-footer bg-white">
                        <button class="btn btn-outline-warning btn-sm float-start" @onclick="(()=> HandleUpdate(product.Id))">
                            <i class="oi oi-arrow-circle-top"></i>
                            Update
                        </button>
                        <button class="btn btn-outline-danger btn-sm float-end" @onclick="(async ()=> await HandleDelete(product.Id, product.Name!))">
                            <i class="oi oi-trash"></i>
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-6 offset-3 mb-5">
                <div class="d-flex justify-content-center mt-5">
                    <div class="spinner-border text-danger" role="status" style="width: 5rem; height: 5rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    string Message = string.Empty;
    string Cssclass = string.Empty;
    public ServiceModel<Product> serviceModel = new ServiceModel<Product>();

    protected override async Task OnInitializedAsync()
    {
        if (productService != null)
        {
            serviceModel = await productService.GetProducts();
        }
    }

    private async Task HandleDelete(int id, string name)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", $"Видалити {name} ?");
        if (confirm)
        {
            var product = await productService.DeleteProduct(id);
            if (product != null && product.Single != null)
            {
                Message = product.Single.Name + " видалено зі списку";
            }
            Cssclass = product?.CssClass ?? string.Empty;
            serviceModel.List = product?.List ?? new List<Product>();
        }
        else
        {
            return;
        }
    }

    private void HandleUpdate(int id)
    {
        navigationManager.NavigateTo($"update-product/{id}");
    }
}